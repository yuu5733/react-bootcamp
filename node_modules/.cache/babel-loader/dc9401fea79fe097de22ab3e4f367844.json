{"ast":null,"code":"var _jsxFileName = \"/Users/yuhyuh/React_work/reactbootcamp/src/pages/Upload/VideoSelector/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button, CardMedia, Grid, Typography } from \"@material-ui/core\";\nimport { useState, useRef, useEffect } from \"react\";\nimport useStyles from \"src/pages/Upload/VideoSelector/style\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const VideoSelect = () => {\n  _s();\n\n  const styles = useStyles(); // 選択されたファイルを保持します。\n\n  const [file, setFile] = useState(); // 動画表示用のURLを格納\n\n  const [videoURL, setVideoURL] = useState(); // サムネイルの画像URLを格納する配列state\n\n  const [thumbnailURLs, setThumbnailURLs] = useState([]); // サムネイルを生成する関数\n\n  const createThumbnail = videoRefURL => {\n    // canvasタグを使って、<video>のビューを転写する\n    const video = document.createElement(\"video\");\n    const canvas = document.createElement(\"canvas\");\n    const context = canvas.getContext(\"2d\"); // <video>の動画の読み込みが終わったら、<canvas>に<video>と同じサイズにリサイズ\n\n    video.onloadeddata = () => {\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      video.currentTime = 0;\n    }; // シーク操作が完了し、現在の再生位置が変更された(onseeked)\n    // video.currentTime が動画の最後になるまで繰り返す\n\n\n    video.onseeked = () => {\n      // HTMLMediaElement.duration（メディアの長さを秒単位で示す）\n      if (video.currentTime >= video.duration || !context) return; // <video>のビューを<canvas>に転写\n\n      context.drawImage(video, 0, 0); // prevs: 保存済みのstateの値（配列）、新しい関数を作ることで更新される。pushだとダメ。\n\n      setThumbnailURLs(prevs => [...prevs, canvas.toDataURL(\"image/jpeg\")]);\n      video.currentTime += Math.ceil(video.duration / 3);\n    }; // createThumbnail関数の引数である、動画の読み込み。\n    // 関数が先に定義されている必要があり、この位置にいる。\n\n\n    video.src = videoRefURL;\n    video.load();\n  }; // 「ファイルを選択」したあとに、選択されたファイルを上記のfileに代入する処理\n\n\n  const selectedFile = event => {\n    var _event$currentTarget$;\n\n    if ((_event$currentTarget$ = event.currentTarget.files) === null || _event$currentTarget$ === void 0 ? void 0 : _event$currentTarget$.length) {\n      setFile(event.currentTarget.files[0]);\n    }\n  };\n\n  const inputRef = useRef(null);\n\n  const handleClick = () => {\n    var _inputRef$current;\n\n    (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.click();\n  };\n\n  useEffect(() => {\n    if (file) {\n      const videoURL = URL.createObjectURL(file);\n      setVideoURL(videoURL);\n      createThumbnail(videoURL);\n    }\n  }, [file]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.root,\n    children: [videoURL && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.full,\n      children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n        component: \"video\",\n        src: videoURL,\n        controls: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        className: styles.textPadding,\n        children: \"\\u30B5\\u30E0\\u30CD\\u30A4\\u30EB\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        className: styles.thumbnailContent,\n        \"aria-label\": \"three preview thumbnails\",\n        children: thumbnailURLs.map(url => {\n          return /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 4,\n            children: /*#__PURE__*/_jsxDEV(CardMedia, {\n              image: url,\n              style: {\n                paddingTop: \"56.25%\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 19\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      hidden: true,\n      ref: inputRef,\n      onChange: selectedFile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this), file === null || file === void 0 ? void 0 : file.name, !videoURL && /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      color: \"primary\",\n      onClick: handleClick,\n      children: \"\\u30D5\\u30A1\\u30A4\\u30EB\\u3092\\u9078\\u629E\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(VideoSelect, \"BMbvj/4Eb8gQdb3OdsnlXCyr8DM=\", false, function () {\n  return [useStyles];\n});\n\n_c = VideoSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoSelect\");","map":{"version":3,"sources":["/Users/yuhyuh/React_work/reactbootcamp/src/pages/Upload/VideoSelector/index.tsx"],"names":["Button","CardMedia","Grid","Typography","useState","useRef","useEffect","useStyles","VideoSelect","styles","file","setFile","videoURL","setVideoURL","thumbnailURLs","setThumbnailURLs","createThumbnail","videoRefURL","video","document","createElement","canvas","context","getContext","onloadeddata","width","videoWidth","height","videoHeight","currentTime","onseeked","duration","drawImage","prevs","toDataURL","Math","ceil","src","load","selectedFile","event","currentTarget","files","length","inputRef","handleClick","current","click","URL","createObjectURL","root","full","textPadding","thumbnailContent","map","url","paddingTop","name"],"mappings":"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","sourcesContent":["import { Button, CardMedia, Grid, Typography } from \"@material-ui/core\";\nimport { useState, useRef, ChangeEvent, useEffect} from \"react\";\nimport useStyles from \"src/pages/Upload/VideoSelector/style\";\n\nexport const VideoSelect = () => {\n  const styles = useStyles();\n  \n  // 選択されたファイルを保持します。\n  const [file, setFile] = useState<File>();\n  // 動画表示用のURLを格納\n  const [videoURL, setVideoURL] = useState<string>();\n  // サムネイルの画像URLを格納する配列state\n  const [thumbnailURLs, setThumbnailURLs] = useState<string[]>([]);\n\n  // サムネイルを生成する関数\n  const createThumbnail = (videoRefURL: string) => {\n    // canvasタグを使って、<video>のビューを転写する\n    const video = document.createElement(\"video\");\n    const canvas = document.createElement(\"canvas\");\n    const context = canvas.getContext(\"2d\");\n\n\n    // <video>の動画の読み込みが終わったら、<canvas>に<video>と同じサイズにリサイズ\n    video.onloadeddata = () => {\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      video.currentTime = 0;\n    };\n\n    // シーク操作が完了し、現在の再生位置が変更された(onseeked)\n    // video.currentTime が動画の最後になるまで繰り返す\n    video.onseeked = () => {\n      // HTMLMediaElement.duration（メディアの長さを秒単位で示す）\n      if (video.currentTime >= video.duration || !context) return;\n\n      // <video>のビューを<canvas>に転写\n      context.drawImage(video, 0, 0);\n\n      // prevs: 保存済みのstateの値（配列）、新しい関数を作ることで更新される。pushだとダメ。\n      setThumbnailURLs((prevs: string[]) => [...prevs, canvas.toDataURL(\"image/jpeg\")]);\n      video.currentTime += Math.ceil(video.duration / 3);\n    };\n\n    // createThumbnail関数の引数である、動画の読み込み。\n    // 関数が先に定義されている必要があり、この位置にいる。\n    video.src = videoRefURL;\n    video.load();\n  };\n\n  // 「ファイルを選択」したあとに、選択されたファイルを上記のfileに代入する処理\n  const selectedFile = (event: ChangeEvent<HTMLInputElement>) => {\n    if (event.currentTarget.files?.length) {\n      setFile(event.currentTarget.files[0]);\n    }\n  };\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const handleClick = () => {\n    inputRef.current?.click();\n  };\n\n  useEffect(() => {\n    if (file) {\n      const videoURL = URL.createObjectURL(file);\n      setVideoURL(videoURL);\n      createThumbnail(videoURL);\n    }\n  }, [file]);\n\n  return (\n    <div className={styles.root}>\n        {videoURL && (\n          <div className={styles.full}>\n            <CardMedia component=\"video\" src={videoURL} controls />\n\n            <Typography className={styles.textPadding}>サムネイル</Typography>\n            <Grid container spacing={2} className={styles.thumbnailContent} aria-label=\"three preview thumbnails\">\n              {thumbnailURLs.map((url) => {\n                return (\n                  <Grid item xs={4}>\n                    <CardMedia image={url} style={{ paddingTop: \"56.25%\" }} />\n                  </Grid>\n                );\n              })}\n            </Grid>\n          </div>\n        )}\n        <input type=\"file\" hidden ref={inputRef} onChange={selectedFile} />\n          {file?.name}\n        {/* variant=\"contained” でボタンを塗りつぶす */}\n        {!videoURL && <Button  variant=\"outlined\" color=\"primary\" onClick={handleClick}>ファイルを選択</Button>}\n    </div>\n  );\n};"]},"metadata":{},"sourceType":"module"}